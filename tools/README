	Tools for Generating Product License Reports Based on oslcrs

This subdirectory is a set of scripts used to perform license analysis
and maintain the oslcrs license reporting system database.  Here is a
current table of contents.


brewRPM			This script accepts a list of RPM packages,
			hopefully all found in Red Hat's Brew system,
			and generates the data structures oslcrs needs
			to perform license and copyright analysis on
			each package.

corgi			Simple front-end for Corgi.  This script allows
			querying products, versions, releases and
			components of a specific release.  Note that
			this corgi script is generally superceeded by
			the griffon project, released as open source.
			E.g. "griffon service license-report <name>"

lic-loader		This script copies the PELC licenses table
			to our report database.  The contents of this
			table is not specific to any product or release,
			but it provides the reference information for
			licenses detected within products and releases.
			For example, starting with the license name
			in the license_detects table, this table can
			provide license home page URL, SPDX name,
			and whether the license has been approved by
			RH Legal for redistribution.  Please see note
			below before using this script.

licenses		PELC includes a table of known licenses.
			This collection is a union of legacy licenses
			based on the original OSL scanner and those
			licenses that can be generated by scancode.
			In addition to information on each license,
			approval status from RH Legal is captured.
			As of this writing (April, 2022), the contents
			of this table represent the best available list
			of RH approved licenses.  This script allows the
			user to query just about anything (or everything)
			in the PELC license table.  See licenses --help
			for details.

manifest		In the future, we will get product/release
			manifest information from the Component Registry
			system currently under development.  But right
			now, if a customer needs a product report,
			or if we want to look at the license content
			of a product/release, then we need to import
			a list of packages that make up that release.
			This script provides a way to create the data
			structures that inform oslcrs of a new release.
			In addition, if a customer has a list of packages,
			this script can help us configure a report for
			this custom list.

fix-report		We are finding the need to patch license reports.
			This script allows both Excel and json format
			report files to be patched in a scripted manner,
			allowing more documentation for what we changed
			and more repeatability.

source-container	This bash script knows how to start with a source
			container URL (excluding the "docker://" portion
			and create an oslcrs json import structure that
			will both define the container's content and
			analyze the packages found in the container.
			Though this can be run on other machines, it's
			best to execute it on oslcrs because certain
			extra tar files will need to be available on the
			oslcrs VM, in order to have a license analysis
			performed on them.  The script can also do the
			same thing for the legacy source fulfillment
			mechanism (-m option), where a package manifest
			txt file URL is provided as input.

test-brew-API		Simple script to ensure we can access the Brew
			API from whatever system is running this script.
			The most common problems would be a failure to
			get to the Brew API URL, such as not being on
			the VPN, and SSL certificate validation failures.


Script Dependencies
-------------------

While not strictly required, it's probably easiest to make use of the
Python virtual environment (venv) that the oslcrs application sets up
and uses.  Running these tools from a virtual environement can solve a
number of subtle Python dependency problems.  This is as easy as executing
the following line (once) before attempting to use these scripts, from
the oslcrs code repository subdirectory:

  source ../oslcrs-env/bin/activate

If the "oslcrs-env" virtual environment is not already configured,
you can either create it using the oslcrs setup script (oslcrs/setup),
or build a subset as follows:

  python3 -m venv ../oslcrs-env
  source ../oslcrs-env/bin/activate
  pip install wheel
  pip install progress
  pip install koji
  pip install psycopg2			# This needed only for the lic* scripts
  pip install openpyxl			# Needed only for the fix-report script
  pip install packageurl-python		# Needed only for the corgi script


Updating oslcrs License Table from PELC (Red Hat Only)
------------------------------------------------------

Within Red Hat, it would be nice if you could click a button in oslcrs
and have it update it's license table from the PELC table.  However,
PELC maintains it's own set of user credentials, which are based on Red
Hat credentials, and it's tricky to get systems to trust one another.
Not saying this can't be done, but for the infrequent times this needs to
be done, it hasn't been made automatic.  Long term, a different solution
will be adopted anyway.

So, you know that some licenses have been approved in PELC and you want
to get these approvals into oslcrs?  Here's what works and why:

First, ensure you have permission to obtain the PELC license table.
If you don't do this first, then you run the risk of deleting the oslcrs
license table and having no way to refill it.  Run this command from
within your python3 virtual environment:

  python licenses -u "your-PELC-user-name" -pa "your-LDAP-password"

If your currently logged-in username matches your PELC login name,
you can skip the "-u your-PELC-user-name" option.

If this command works, you will get a list of the ~1800 licenses in the
PELC license table.  If the above command fails, figure out what's wrong.
Have you activated the virtual environment so that you have the necessary
python dependencies?  Are your user and password correct?  Get this
working first!

Once the above works, switch "licenses" to "lic-loader" using the same
command parameters.  You'll get an error letting you know that you need
some additional parameters, mainly how to access the oslcrs database.
The oslcrs database runs on the oslcrs machine:

  oslcrs.engineering.redhat.com

If you run the script on oslcrs, you can use "localhost" for the
machine name.  I'd rather not put the database username and password in
this README, but these were configured when the DB was created, and the
oslcrs programs obtain these values from the ../set_env script.


Non-Red Hat License Table Update
--------------------------------

Different installations will manage license approval information
differently.  Currently, we don't provide any tools to help with
integrating any other license approval data with oslcrs.  However, if
it makes sense to add support for a different scheme, it can be added
to this tools subdirectory.

Also, one future idea might be to make oslcrs the keeper of license
approval information.  This functionality could be added to oslcrs,
removing the need for integration with external systems.
